<?php

require_once('cmrf_form_processor.cmrf.inc');

/**
 * @var array
 *   Holds the original submission objects as soon as a submission is updated.
 */
$cmrf_form_processor_submissions_updated = array();

function cmrf_form_processor_form_alter(&$form, &$form_state, $form_id) {
  if (stripos($form_id, 'webform_client_form_')!==0) {
    // Is not a webform;
    return;
  }
  $node = $form['#node'];
  if (!$node->cmrf_form_processor_enable) {
    return;
  }
  if (!$node->cmrf_form_processor_default_data_enable) {
    return;
  } 
  
  $profile = !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : null;
  $cache = $node->cmrf_form_processor_default_data_cache;
  $defaultDataParams = array();
  foreach($node->cmrf_form_processor_default_data as $key => $value) {
    if (!empty($value)) {
      $defaultDataParams[$key] = token_replace($value);
    }
  } 
  $defaultData = cmrf_form_processor_get_default_data($node->cmrf_form_processor_processor, $defaultDataParams, $cache, $profile);
  foreach($node->webform['components'] as $cid => $component) {
    if (isset($defaultData[$component['form_key']])) {
      $node->webform['components'][$cid]['value'] = $defaultData[$component['form_key']];
    }
  }
  _cmrf_form_processor_form_alter_walk_submitted_tree($form['submitted'], $defaultData);
}

/**
 * Recursive function to prefill the default data onto the webform.
 */
function _cmrf_form_processor_form_alter_walk_submitted_tree(&$tree, $defaultData) {
  foreach($tree as $name => $field) {
    if (is_array($field) && array_key_exists('#default_value', $field) && isset($defaultData[$name])) {
      $tree[$name]['#default_value'] = $defaultData[$name];
    }
    if (is_array($field)) {
      _cmrf_form_processor_form_alter_walk_submitted_tree($tree[$name], $defaultData);
    }
  }
}

/**
 * Implements hook_webform_submission_presave().
 */
function cmrf_form_processor_webform_submission_presave($node, &$submission) {
  global $cmrf_form_processor_submissions_updated;
  if ($submission->is_draft) {
    return;
  }
  // Only submit webforms when civimrf is enabled.
  if (!$node->cmrf_form_processor_enable) {
    return;
  }
  $original_submissions = webform_get_submissions(array('nid' => $submission->nid, 'sid' => $submission->sid));
  if (isset($original_submissions[$submission->sid])) {
    $cmrf_form_processor_submissions_updated[$submission->sid] = $original_submissions[$submission->sid];
  }

}

/**
 * Implements hook_webform_submission_update().
 */
function cmrf_form_processor_webform_submission_update($node, $submission) {
  global $cmrf_form_processor_submissions_updated;
  if ($submission->is_draft) {
    return;
  }
  // Only submit webforms when civimrf is enabled.
  if (!$node->cmrf_form_processor_enable) {
    return;
  }
  $sid = $submission->sid;
  if (!isset($cmrf_form_processor_submissions_updated[$sid])) {
    return;
  }
  if ($cmrf_form_processor_submissions_updated[$sid]->is_draft && !$submission->is_draft) {
    cmrf_form_processor_submit($node, $submission);
  }
}

function cmrf_form_processor_webform_submission_insert($node, $submission) {
  cmrf_form_processor_submit($node, $submission);
}

/**
 * Helper function to submit data
 *
 * @param $node
 * @param $submission
 */
function cmrf_form_processor_submit($node, $submission) {
  // Do not pass draft webforms.
  if ($submission->is_draft) {
    return;
  }

  // Only submit webforms when civimrf is enabled.
  if (!$node->cmrf_form_processor_enable) {
    return;
  }

  $profile = !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : null;

  // Build the parameters for the call
  $params = array();
  $data = $submission->data;
  $webform = $node->webform;
  foreach($webform['components'] as $index => $component) {
    if (isset($data[$index])) {
      $value = $data[$index];
      if (is_array($value) && empty($component['extra']['multiple'])) {
        $value = reset($value);
      }
      $params[$component['form_key']] = $value;
    }
  }
  drupal_alter('cmrf_form_processor_submit_params', $params, $node, $submission);
  $options = array(
    'nid' => $submission->nid,
    'sid' => $submission->sid,
  );
  $callbacks = array();
  if ($node->cmrf_form_processor_clear_submission) {
    $callbacks[] = 'cmrf_webform_clear_submission';
  }

  if ($node->cmrf_form_processor_queue) {
    cmrf_webform_queue_call('FormProcessor', $node->cmrf_form_processor_processor, $params, $options, $profile, $callbacks);
  } else {
    cmrf_webform_send_call('FormProcessor', $node->cmrf_form_processor_processor, $params, $options, $profile, $callbacks);
  }
}

/**
 * Implements hook_form_alter().
 * 
 * Adds the possibility to use an option list from the form processor
 * on a select field.
 */
function cmrf_form_processor_form_webform_component_edit_form_alter(&$form, &$form_state) {
  if ($form['type']['#value'] != 'select') {
    return;
  }
  
  $node = $form['#node'];
  if (!$node->cmrf_form_processor_enable) {
    return;
  }
  
  $enabled = false;
  $option_field = null;
  $option_field_params = null;
  $cid = $form['cid']['#value'];
  if ($cid) {
    $component = isset($node->webform['components'][$cid]) ? $node->webform['components'][$cid] : FALSE;
    if ($component) {
      $enabled = isset($component['extra']['cmrf_form_processor_options_enabled']) && $component['extra']['cmrf_form_processor_options_enabled'] ? true : false;
      if ($enabled && isset($component['extra']['cmrf_form_processor_options'])) {
        $option_field = $component['extra']['cmrf_form_processor_options'];
      }
      if ($enabled && isset($component['extra']['cmrf_form_processor_options_params'])) {
        $option_field_params = $component['extra']['cmrf_form_processor_options_params'];
      }
    }
  }
  
  $profile = !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : null;
  $form_processor = $node->cmrf_form_processor_processor;
  $available_fields = cmrf_form_processor_get_fields($form_processor, $profile); 
  $fields_with_options = array();
  foreach($available_fields as $field) {
    if (isset($field['options']) && is_array($field['options'])) {
      $fields_with_options[$field['name']] = $field['title'];
    }
  }
  
  $form['extra']['cmrf_form_processor_options_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Load options from CiviMRF Form Processor'),
    '#default_value' => $enabled,
    
  );
  $form['extra']['cmrf_form_processor_options'] = array(
    '#type' => 'select', 
    '#title' => t('Options from the CiviMRF form processor'),
    '#options' => $fields_with_options,
    '#default_value' => $option_field,
    '#states' => array(
      'visible' => array(
        'input[name="extra[cmrf_form_processor_options_enabled]"]' => array('checked' => true),
      ),
    ),
  );
  $form['extra']['cmrf_form_processor_options_params'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional parameters for retrieving the option list'),
    '#description' => t('If you have a conditional option list, enter the parameters for that list here. Enter it in json and you could use tokens.').theme('webform_token_help'),
    '#default_value' => $option_field_params,
    '#states' => array(
      'visible' => array(
        'input[name="extra[cmrf_form_processor_options_enabled]"]' => array('checked' => true),
      ),
    ),
  );
  
  $form['extra']['items']['#states']['invisible']['input[name="extra[cmrf_form_processor_options_enabled]"]'] = array('checked' => true);
  $form['extra']['items']['#states']['required']['input[name="extra[cmrf_form_processor_options_enabled]"]'] = array('checked' => false);
  $form['extra']['options_source']['#states']['invisible']['input[name="extra[cmrf_form_processor_options_enabled]"]'] = array('checked' => true);

  if (isset($form_state['input']['extra']['cmrf_form_processor_options_enabled']) && $form_state['input']['extra']['cmrf_form_processor_options_enabled']) {
    $form['extra']['items']['#required'] = false;
  }
}

/**
 * Implements hook_form_alter().
 */
function cmrf_form_processor_form_webform_components_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  if (isset($node->cmrf_form_processor_enable) && $node->cmrf_form_processor_enable) {
    $profiles = cmrf_core_list_profiles();
    $profile = t('Default');
    if (!empty($node->cmrf_form_processor_profile) && isset($profiles[$node->cmrf_form_processor_profile])) {
      $profile = $profiles[$node->cmrf_form_processor_profile]['label'];
    }
    $form_processor = $node->cmrf_form_processor_processor;
    $form['warning']['civimrf_form_processor'] = array(
      '#markup' => '
          <p class="civimrf_form_processor-description">
            <span class="civimrf_form_processor-icon enable"></span>' . 
            t('CiviMRF Form Processor is enabled and this webform will be submitted to CiviCRM with the %profile profile to %form_processor', array('%profile' => $profile, '%form_processor' => $form_processor)) . 
          '</p>',
      '#weight' => -1000,
    );
    
    // Get the fields
    $fields = cmrf_form_processor_get_fields($form_processor, $node->cmrf_form_processor_profile);
    foreach($node->webform['components'] as $comp) {
      if (isset($fields[$comp['form_key']])) {
        unset($fields[$comp['form_key']]);
      }
    }
    drupal_alter('cmrf_form_processor_missing_fields', $fields, $node);
    foreach($fields as $fieldName => $field) {
      if (isset($field['api.required']) && !$field['api.required']) {
        unset($fields[$fieldName]);
      }
    }
    $missing_fields = array_keys($fields);
    if (count($missing_fields)) {
      drupal_set_message(t('The field(s) %fields are missing from the form', array('%fields' => implode(", ", $missing_fields))), 'error');
    }
    
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'cmrf_form_processor') . '/css/cmrf_form_processor.css',
    );
  }
  return $form;
}

/**
 * implements hook_webform_component_render_alter().
 *
 * Add the options from the form processor option list when the administrator
 * has selected to use an option list from the form processor.
 */
function cmrf_form_processor_webform_component_render_alter(&$element, $component) {
  if ($component['type'] != 'select') {
    return;
  }
  $node = node_load($component['nid']);
  if (!$node->cmrf_form_processor_enable) {
    return;
  }
  if ($component)

    $profile = !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : null;
  $form_processor = $node->cmrf_form_processor_processor;
  $enabled = isset($component['extra']['cmrf_form_processor_options_enabled']) && $component['extra']['cmrf_form_processor_options_enabled'] ? true : false;
  if ($enabled && isset($component['extra']['cmrf_form_processor_options'])) {
    $additional_params = array();
    if (isset($component['extra']['cmrf_form_processor_options_params'])) {
      $additional_params = json_decode(token_replace($component['extra']['cmrf_form_processor_options_params']), true);
    }
    $available_fields = cmrf_form_processor_get_fields($form_processor, $profile, $additional_params);
    $option_field = $component['extra']['cmrf_form_processor_options'];
    if (isset($available_fields[$option_field]) && isset($available_fields[$option_field]['options']) && is_array($available_fields[$option_field]['options'])) {
      $element['#options'] = $available_fields[$option_field]['options'];
      $element['#access'] = TRUE;
    }
  }
}

function cmrf_form_processor_form_cmrf_webform_settings_alter(&$form, &$form_state) {
  $profiles = cmrf_core_list_profiles();
  $profiles_options = array('' => t(' - Default profile -'));
  foreach($profiles as $profile_name => $profile) {
    $profiles_options[$profile_name] = $profile['label'];
  }
  
  $node = $form['#node'];
  $enabled = isset($node->cmrf_form_processor_enable) && $node->cmrf_form_processor_enable ? TRUE : FALSE;
  $queue = isset($node->cmrf_form_processor_queue) && $node->cmrf_form_processor_queue ? TRUE : FALSE;
  $clear_submission = isset($node->cmrf_form_processor_clear_submission) ? $node->cmrf_form_processor_clear_submission : TRUE;
  $profile = isset($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : '';
  $processor = isset($node->cmrf_form_processor_processor) ? $node->cmrf_form_processor_processor : '';
  $defaultData = isset($node->cmrf_form_processor_default_data) ? $node->cmrf_form_processor_default_data : array();
  $defaultDataEnabled = isset($node->cmrf_form_processor_default_data_enable) && $node->cmrf_form_processor_default_data_enable ? TRUE : FALSE;
  $defaultDataCache = isset($node->cmrf_form_processor_default_data_cache) ? $node->cmrf_form_processor_default_data_cache : '3 minutes';
  
  $submitted_profile = !empty($form_state['values']['cmrf_form_processor_profile']) ? $form_state['values']['cmrf_form_processor_profile'] : $profile;
  $processors = cmrf_form_processor_get_processor_list($submitted_profile);
  $submitted_processor = !empty($form_state['values']['cmrf_form_processor_processor']) ? $form_state['values']['cmrf_form_processor_processor'] : $processor;
  
  $form['cmrf_webform']['cmrf_enable']['#options']['cmrf_form_processor'] = t('Submit to CiviCRM Form Processor');
  if ($enabled && empty($form['cmrf_webform']['cmrf_enable']['#default_value'])) {
    $form['cmrf_webform']['cmrf_enable']['#default_value'] = 'cmrf_form_processor';
  }  

  $form['cmrf_form_processor']['cmrf_form_processor_queue'] = array(
    '#type' => 'checkbox',
    '#title' => t('Handle the submission in the background'),
    '#description' => t('Submit this webform in the background. This means that the user does not have to wait till the submission is processed. You have to enable the cron to get this working.'),
    '#default_value' => $queue,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_form_processor'),
      ),
    ),
  );
  $form['cmrf_form_processor']['cmrf_form_processor_clear_submission'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete the submission after processing.'),
    '#description' => t('Deletes the submission form the webform results after the data has been submitted to CiviCRM.'),
    '#default_value' => $clear_submission,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_form_processor'),
      ),
    ),
  );
  $form['cmrf_form_processor']['cmrf_form_processor_profile'] = array(
    '#type' => 'select',
    '#title' => t('CiviMRF Connection profile'),
    '#options' => $profiles_options,
    '#default_value' => $profile,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_form_processor'),
      ),
    ),
    '#ajax' => array(
      'callback' => 'cmrf_form_processor_settings_processor_options',
      'wrapper' => 'wrapper-cmrf_form_processor_processor',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['cmrf_form_processor']['cmrf_form_processor_processor'] = array(
    '#type' => 'select',
    '#title' => t('Form Processor'),
    '#description' => t('CiviMRF Form Processor works with submitting data to the CiviCRM Form Processor API. This field specifies which form processor to use.'),
    '#default_value' => $processor,
    '#options' => $processors,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_form_processor'),
      ),
      'required' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_form_processor'),
      ),
    ),
    '#prefix' => '<div id="wrapper-cmrf_form_processor_processor">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'cmrf_form_processor_settings_processor_default',
      'wrapper' => 'wrapper-cmrf_form_processor_default',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['cmrf_form_processor_default'] = array(
    '#type' => 'fieldset',
    '#title' => t('Prefil the form with existing data'),
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_form_processor'),
      ),
    ),
  );
  $form['cmrf_form_processor_default']['cmrf_form_processor_default_data_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prefil the form with existing data'),
    '#default_value' => $defaultDataEnabled,
  );
  $form['cmrf_form_processor_default']['cmrf_form_processor_default_data'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="wrapper-cmrf_form_processor_default">',
    '#suffix' => '</div>',
    '#type' => 'container',
    '#theme' => 'table',
    '#header' => array(t('Field'), t('Value')),
    '#rows' => array(),
    '#states' => array(
      'visible' => array(
        'input[name="cmrf_form_processor_default_data_enable"]' => array('checked' => true),
      ),
    ),
  );
  if (!empty($submitted_processor)) {
    $defaultFields = cmrf_form_processor_get_default_fields($submitted_processor, $submitted_profile);
    $i=0;
    foreach($defaultFields as $field) {
      $required = '';
      $defaultFieldName = array(
        '#id' => 'default_field_name_'.$i,
        '#type' => 'hidden',
        '#default_value' => $field['name'],
        '#prefix' => $field['title'],
        '#suffix' => $field['api.required'] ? '<span class="form-required">*</span>' : '', 
      );
      $defaultFieldData = array(
        '#id' => 'default_field_data_'.$i,
        '#default_value' => isset($defaultData[$field['name']]) ? $defaultData[$field['name']] : '',
        '#type' => 'textfield',
        '#required' => false, //$field['api.required'],
        '#description' => theme('webform_token_help'),
      );
      
      $form['cmrf_form_processor_default']['cmrf_form_processor_default_data'][$i] = array(
        'default_field_name' => &$defaultFieldName,
        'default_field_data' => &$defaultFieldData,
      );
      $form['cmrf_form_processor_default']['cmrf_form_processor_default_data']['#rows'][] = array(
        array('data' => &$defaultFieldName),
        array('data' => &$defaultFieldData),
      );
      
      unset($defaultFieldName);
      unset($defaultFieldData);
      
      $i++;
    }
  }

  $form['cmrf_form_processor_default']['cmrf_form_processor_default_data_cache'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache time for retrieved default values'),
    '#description' => t('Leave empty to disable the cache. Or enter a value in the format as 1 minute, 30 minutes, 2 seconds, etc.'),
    '#default_value' => $defaultDataCache,
    '#states' => array(
      'visible' => array(
        'input[name="cmrf_form_processor_default_data_enable"]' => array('checked' => true),
      ),
    ),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Save');

  $form['#validate'][] = 'cmrf_form_processor_settings_validate';
  $form['#submit'][] = 'cmrf_form_processor_settings_submit';
  return $form;
}

function cmrf_form_processor_settings_processor_options($form, $form_state) {
  return $form['cmrf_webform']['cmrf_form_processor_processor'];
}

function cmrf_form_processor_settings_processor_default($form, $form_state) {
  return $form['cmrf_webform']['cmrf_form_processor_default'];
}


/**
 * Validate the webform settings form.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 */
function cmrf_form_processor_settings_validate(array &$form, array &$form_state) {
  if ($form_state['values']['cmrf_enable'] == 'cmrf_form_processor') {
    if (empty($form_state['values']['cmrf_form_processor_processor'])) {
      form_set_error('cmrf_form_processor_processor', t('Form Processor is required.'));
    } else {
      $submitted_profile = $form_state['values']['cmrf_form_processor_profile'];
      $submitted_processor = $form_state['values']['cmrf_form_processor_processor'];      
      $defaultFields = cmrf_form_processor_get_default_fields($submitted_processor, $submitted_profile);
      if (isset($form_state['values']['cmrf_form_processor_default_data_enable']) && $form_state['values']['cmrf_form_processor_default_data_enable']) {
        foreach($form_state['input']['cmrf_form_processor_default_data'] as $default_data) {
          if (empty($default_data['default_field_data']) && !empty($defaultFields[$default_data['default_field_name']]['api.required'])) {
            form_set_error('cmrf_form_processor_default_data', t('Not all required parameters are set'));
          }
        }
      }
    }
  }
}

/**
 * Submit the webform settings form and store the civimrf settings.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 */
function cmrf_form_processor_settings_submit(array &$form, array &$form_state) {
  $node = &$form['#node'];
  $node->cmrf_form_processor_enable = $form_state['values']['cmrf_enable'] == 'cmrf_form_processor' ? TRUE : FALSE;  
  $node->cmrf_form_processor_queue = $form_state['values']['cmrf_form_processor_queue'] ? TRUE : FALSE;
  $node->cmrf_form_processor_clear_submission = $form_state['values']['cmrf_form_processor_clear_submission'] ? TRUE : FALSE;
  $node->cmrf_form_processor_profile = $form_state['values']['cmrf_form_processor_profile'] ? $form_state['values']['cmrf_form_processor_profile'] : '';
  $node->cmrf_form_processor_processor = $form_state['values']['cmrf_form_processor_processor'] ? $form_state['values']['cmrf_form_processor_processor'] : '';
  $node->cmrf_form_processor_default_data_cache = isset($form_state['values']['cmrf_form_processor_default_data_cache']) ? $form_state['values']['cmrf_form_processor_default_data_cache'] : '';
  $node->cmrf_form_processor_default_data_enable = isset($form_state['values']['cmrf_form_processor_default_data_enable']) && $form_state['values']['cmrf_form_processor_default_data_enable'] ? true : false;
  
  $node->cmrf_form_processor_default_data = array();
  if (isset($form_state['input']['cmrf_form_processor_default_data'])) {
    foreach($form_state['input']['cmrf_form_processor_default_data'] as $default_data) {
      $node->cmrf_form_processor_default_data[$default_data['default_field_name']] = $default_data['default_field_data'];  
    }
  }
  
  node_save($node);

  if ($form_state['values']['cmrf_enable'] == 'cmrf_form_processor') {
    drupal_set_message(t('Webform %name CiviMRF Form Processor enabled.', array('%name' => $node->title)));
  }
}


/**
 * Deferred hook_node_load for webforms.
 *
 * @param array $nodes
 *    Array of nodes.
 * @param array $types
 *    Array of types.
 */
function cmrf_form_processor_node_load($nodes, $types) {
  $db = db_query('SELECT * FROM {cmrf_form_processor_webforms} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($db as $cmrf_webform) {
    $node = &$nodes[$cmrf_webform->nid];
    $node->cmrf_form_processor_enable = $cmrf_webform->cmrf_form_processor_enable ? TRUE : FALSE;
    $node->cmrf_form_processor_queue = $cmrf_webform->cmrf_form_processor_queue ? TRUE : FALSE;
    $node->cmrf_form_processor_clear_submission = $cmrf_webform->cmrf_form_processor_clear_submission ? TRUE : FALSE;
    $node->cmrf_form_processor_profile = $cmrf_webform->cmrf_form_processor_profile ? $cmrf_webform->cmrf_form_processor_profile : '';
    $node->cmrf_form_processor_processor = $cmrf_webform->cmrf_form_processor_processor ? $cmrf_webform->cmrf_form_processor_processor : '';
    $node->cmrf_form_processor_default_data_enable = $cmrf_webform->cmrf_form_processor_default_data_enable ? TRUE : FALSE;
    $node->cmrf_form_processor_default_data_cache = $cmrf_webform->cmrf_form_processor_default_data_cache;
    $node->cmrf_form_processor_default_data = !empty($cmrf_webform->cmrf_form_processor_default_data) ? json_decode($cmrf_webform->cmrf_form_processor_default_data, true) : array();
    if ($node->cmrf_form_processor_enable) {
      $profile = !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : NULL;
      $form_processor = $node->cmrf_form_processor_processor;
      foreach($node->webform['components'] as $cid => $component) {
        if (isset($component['extra']['cmrf_form_processor_options_enabled']) && $component['extra']['cmrf_form_processor_options_enabled']) {
          $additional_params = [];
          if (isset($component['extra']['cmrf_form_processor_options_params'])) {
            $additional_params = json_decode(token_replace($component['extra']['cmrf_form_processor_options_params']), TRUE);
          }
          $available_fields = cmrf_form_processor_get_fields($form_processor, $profile, $additional_params);
          $option_field = $component['extra']['cmrf_form_processor_options'];
          if (isset($available_fields[$option_field]) && isset($available_fields[$option_field]['options']) && is_array($available_fields[$option_field]['options'])) {
            $node->webform['components'][$cid]['extra']['items'] = _webform_select_options_to_text($available_fields[$option_field]['options']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function cmrf_form_processor_node_insert($node) {
  db_insert('cmrf_form_processor_webforms')
    ->fields(array(
      'nid' => $node->nid,
      'cmrf_form_processor_enable' => !empty($node->cmrf_form_processor_enable) ? 1 : 0,
      'cmrf_form_processor_queue' => !empty($node->cmrf_form_processor_queue) ? 1 : 0,
      'cmrf_form_processor_clear_submission' => !empty($node->cmrf_form_processor_clear_submission) ? 1: 0,
      'cmrf_form_processor_profile' => !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : '',
      'cmrf_form_processor_processor' => !empty($node->cmrf_form_processor_processor) ? $node->cmrf_form_processor_processor : '',
      'cmrf_form_processor_default_data_enable' => !empty($node->cmrf_form_processor_default_data_enable) ? 1 : 0,
      'cmrf_form_processor_default_data_cache' => $node->cmrf_form_processor_default_data_cache ? $node->cmrf_form_processor_default_data_cache : '',
      'cmrf_form_processor_default_data' => !empty($node->cmrf_form_processor_default_data) ? json_encode($node->cmrf_form_processor_default_data) : '',
    ))
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function cmrf_form_processor_node_update($node) {
  db_merge('cmrf_form_processor_webforms')
    ->key(array(
      'nid' => $node->nid,
    ))
    ->fields(array(
      'cmrf_form_processor_enable' => !empty($node->cmrf_form_processor_enable) ? 1 : 0,
      'cmrf_form_processor_queue' => !empty($node->cmrf_form_processor_queue) ? 1 : 0,
      'cmrf_form_processor_clear_submission' => !empty($node->cmrf_form_processor_clear_submission) ? 1: 0,
      'cmrf_form_processor_profile' => !empty($node->cmrf_form_processor_profile) ? $node->cmrf_form_processor_profile : '',
      'cmrf_form_processor_processor' => !empty($node->cmrf_form_processor_processor) ? $node->cmrf_form_processor_processor : '',
      'cmrf_form_processor_default_data_enable' => !empty($node->cmrf_form_processor_default_data_enable) ? 1 : 0,
      'cmrf_form_processor_default_data_cache' => $node->cmrf_form_processor_default_data_cache ? $node->cmrf_form_processor_default_data_cache : '',
      'cmrf_form_processor_default_data' => !empty($node->cmrf_form_processor_default_data) ? json_encode($node->cmrf_form_processor_default_data) : '',
    ))
    ->execute();
}

/**
 * Implements hook_node_delete().
 */
function cmrf_form_processor_node_delete($node) {
  db_delete('cmrf_form_processor_webforms')
    ->condition('nid', $node->nid)
    ->execute();
}
